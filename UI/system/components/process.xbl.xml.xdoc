/**
	@name UI.process
	@component /UI/system/components/process.xbl.xml#process
	@class 
	@model UI
	@description 流程组件
	@see ProcessExternalActions
	@example
	流程组件主要包括以下内容：
	1. 流程的一些配置选项
	data-type：流程控制信息的数据格式；
	dialog-window：流程对话框页面；
	dialog-height：流程对话框的高度；
	dialog-width：流程对话框的宽度；
	data：流程关联的数据组件；
	auto-close：是否自动关闭功能页面；
	auto-start：是否自动启动流程；
	auto-save：是否自动保存业务数据；
	auto-filter：是否自动过虑业务数据；
	old-version：是否使用老版本对话框；
	
	2. 流程动作的js api
	启动流程、终止查询、终止、流转查询、流转、回退、回退查询、暂停查询、暂停、转发查询、转发、定制查询、定制和回收任务都
可以调用流程组件上的相应api来实现。
	例如：
<xmp>
	var p = justep.xbl("process1"); //process1是流程组件的id
	p.advanceQuery(); //流转查询
</xmp>	

	3. 流程动作的js事件
	对于查询类的流程动作，流程组件公布了三个事件：执行前事件、执行后事件和执行失败事件，查询类的流程动作不启动事务；
	对于非查询类的流程动作，流程组件公布了四个事件：执行前事件、执行后事件、动作提交事件和执行失败事件，其中，执行前事件和执行后
事件与流程动作处于同一个事务中，动作提交事件和执行失败事件在事务之后。
	
	案例：
	1. 在界面中，流转之前检查业务数据是否符合业务要求（比如金额必须大于100），否则弹出提示
<xmp>
	mainActivity.flwBeforeAdvanceQuery = function(event){
		var data = justep.xbl("mainData"); //mainData是业务数据关联的bizData的id
		var fAmount = data.getValue("fAmount"); //fAmount是金额字段
		if (fAmout < 100){
			event.cancel = true; //取消后续的流程动作
			alert("订单的金额必须大小100");
		}
	};
</xmp>	

			
*/

/**
	@name UI.process#component
	@attribute
	@required
	@description 组件标识
	@default "/UI/system/components/process.xbl.xml#process"
*/

/**
	@name UI.process#data__sub__type
	@attribute
	@description ProcessControl的数据格式，支持两种: "xml"和"json"
	@default "json"
*/

/**
	@name UI.process#dialog__sub__window
	@attribute
	@description 流程对话框的url，允许用户指定自己的流转对话框
	@default "/UI/system/service/process/dialogs/processDialog.w"
*/

/**
	@name UI.process#dialog__sub__width
	@attribute
	@description 流程对话框宽度
	@default "600px"
*/

/**
	@name UI.process#dialog__sub__height
	@attribute
	@description 流程对话框高度
	@default "480px"
*/

/**
	@name UI.process#old__sub__version
	@attribute
	@description 是否使用旧版的流程对话框
	@default false
*/

/**
	@name UI.process#id
	@attribute 
	@required
	@description id标识
*/

/**
	@name UI.process#data
	@attribute 
	@description 关联的data
*/

/**
	@name UI.process#auto__sub__close
	@attribute 
	@description 执行完流程相关操作(流转，回退，转发，中止，暂停，终止)后，是否自动关闭当前页面。
	@default true
*/

/**
	@name UI.process#auto__sub__start
	@attribute 
	@description 是否在save(即insert)之后自动启动流程，启动流程时，默认sData1的值是data的rowid。
	@default true
*/

/**
	@name UI.process#auto__sub__save
	@attribute 
	@description 执行流程相关操作(流转查询，回退查询，转发查询，中止查询，暂停查询，终止查询)之前，是否自动保存业务数据。
	@default true
*/

/**
	@name UI.process#auto__sub__filter
	@attribute 
	@description 是否自动为data添加相关的过虑条件(data的rowid为sData1)。
	@default true
*/



/**
	@name UI.process#onBeforeStart
	@event
	@description <b>[回调型事件]</b>启动流程之前（流程启动事务内）
	@param event 它的结构如下:
<xmp>
	{
		"source":组件的js对象,
		"process":流程,
		"relations":{
			"关系名称":"关系值"
		},
		"executor":首环节的执行者,
		"cancel":false
	}
</xmp>	
*/

/**
	@name UI.process#onBeforeOpenDialog
	@event
	@description <b>[回调型事件]</b>打开流程对话框之前
	@param event 它的结构如下:
<xmp>
	{
		"source":组件的js对象,
		"action":当前执行的操作,
		"task":当前任务ID,
		"data":ProcessControl,
		"cancel":false
	}
</xmp>	
*/

/**
	@name UI.process#onAfterStart
	@event
	@description <b>[回调型事件]</b>启动流程之后（流程启动事务内）
	@param event 它的结构如下:
<xmp>	
	{
		"source":组件的js对象,
		"process":流程,
		"relations":{
			关系名称:关系值
		},
		"executor":首环节的执行者,
		"cancel":false
	}
</xmp>	
*/

/**
	@name UI.process#onStartCommit
	@event
	@description <b>[回调型事件]</b>启动流程成功（流程启动事务外）
	@param event 它的结构如下:
<xmp>	
	{
		"source":组件的js对象,
		"process":流程,
		"relations":{
			关系名称:关系值
		},
		"executor":首环节的执行者,
		"cancel":false, 
		"task":活动环节对应的任务标识
	}
</xmp>	
*/

/**
	@name UI.process#onStartError
	@event
	@description <b>[回调型事件]</b>启动流程失败（流程启动事务外）
	@param event 它的结构如下:
<xmp>	
	{
		"source":组件的js对象,
		"process":流程,
		"relations":{
			关系名称:关系值
		},
		"executor":首环节的执行者,
		"cancel":false, 
		"errorType": "client"或"server", 
		"error": js异常对象, 
		"errorNode": 服务端错误信息
	}
</xmp>	
*/

/**
	@name UI.process#onBeforeAdvance
	@event
	@description <b>[回调型事件]</b>流转之前（流转事务内）
	@param event 它的结构如下:
<xmp>
	{
		"source":组件的js对象,
		"task":任务标识,
		"processControl":流转信息,
		"cancel":false
	}
</xmp>	
*/

/**
	@name UI.process#onAfterAdvance
	@event
	@description <b>[回调型事件]</b>流转之后（流转事务内）
	@param event 它的结构如下:
<xmp>	
	{
		"source":组件的js对象,
		"task":任务标识,
		"processControl":流转信息,
		"cancel":false
	}
</xmp>	
*/

/**
	@name UI.process#onAdvanceCommit
	@event
	@description <b>[回调型事件]</b>流转成功（流转事务外）
	@param event 它的结构如下:
<xmp>	
	{
		"source":组件的js对象,
		"task":任务标识,
		"processControl":流转信息,
		"cancel":false
	}
</xmp>	
*/

/**
	@name UI.process#onAdvanceError
	@event
	@description <b>[回调型事件]</b>流转失败（流转事务外）
	@param event 它的结构如下:
<xmp>	
	{
		"source":组件的js对象,
		"task":任务标识,
		"processControl":流转信息,
		"cancel":false,
		"errorType": "client"或"server", 
		"error": js异常对象, 
		"errorNode": 服务端错误信息
	}
</xmp>	
*/

/**
	@name UI.process#onBeforeAdvanceQuery
	@event
	@description <b>[回调型事件]</b>流转查询之前
	@param event 它的结构如下:
<xmp>
	{
		"source":组件的js对象,
		"task":任务标识,
		"cancel":false
	}
</xmp>	
*/

/**
	@name UI.process#onAfterAdvanceQuery
	@event
	@description <b>[回调型事件]</b>流转查询之后
	@param event 它的结构如下:
<xmp>	
	{
		"source":组件的js对象,
		"task":任务标识,
		"processControl":流转信息,
		"cancel":false
	}
</xmp>	
*/

/**
	@name UI.process#onAdvanceQueryError
	@event
	@description <b>[回调型事件]</b>流转查询失败
	@param event 它的结构如下:
<xmp>	
	{
		"source":组件的js对象,
		"task":任务标识,
		"cancel":false,
		"errorType": "client"或"server", 
		"error": js异常对象, 
		"errorNode": 服务端错误信息
	}
</xmp>	
*/

/**
	@name UI.process#onBeforeBack
	@event
	@description <b>[回调型事件]</b>回退之前（回退事务内）
	@param event 它的结构如下:
<xmp>	
	{
		"source":组件的js对象,
		"task":任务标识,
		"processControl":流转信息,
		"cancel":false
	}
</xmp>	
*/

/**
	@name UI.process#onAfterBack
	@event
	@description <b>[回调型事件]</b>回退之后（回退事务内）
	@param event 它的结构如下:
<xmp>	
	{
		"source":组件的js对象,
		"task":任务标识,
		"processControl":流转信息,
		"cancel":false
	}
</xmp>	
*/

/**
	@name UI.process#onBackCommit
	@event
	@description <b>[回调型事件]</b>回退成功（回退事务外）
	@param event 它的结构如下:
<xmp>	
	{
		"source":组件的js对象,
		"task":任务标识,
		"processControl":流转信息,
		"cancel":false
	}
</xmp>	
*/

/**
	@name UI.process#onBackError
	@event
	@description <b>[回调型事件]</b>回退失败（回退事务外）
	@param event 它的结构如下:
<xmp>	
	{
		"source":组件的js对象,
		"task":任务标识,
		"processControl":流转信息,
		"cancel":false,
		"errorType": "client"或"server", 
		"error": js异常对象, 
		"errorNode": 服务端错误信息
	}
</xmp>	
*/

/**
	@name UI.process#onBeforeBackQuery
	@event
	@description <b>[回调型事件]</b>回退查询之前
	@param event 它的结构如下:
<xmp>	
	{
		"source":组件的js对象,
		"task":任务标识,
		"cancel":false
	}
</xmp>	
*/

/**
	@name UI.process#onAfterBackQuery
	@event
	@description <b>[回调型事件]</b>回退查询之后
	@param event 它的结构如下:
<xmp>	
	{
		"source":组件的js对象,
		"task":任务标识,
		"processControl":流转信息,
		"cancel":false
	}
</xmp>	
	
*/

/**
	@name UI.process#onBackQueryError
	@event
	@description <b>[回调型事件]</b>回退查询失败
	@param event 它的结构如下:
<xmp>	
	{
		"source":组件的js对象,
		"task":任务标识,
		"cancel":false,
		"errorType": "client"或"server", 
		"error": js异常对象, 
		"errorNode": 服务端错误信息
	}
</xmp>	
*/

/**
	@name UI.process#onBeforeAbort
	@event
	@description <b>[回调型事件]</b>终止之前（终止事务内）
	@param event 它的结构如下:
<xmp>	
	{
		"source":组件的js对象,
		"task":任务标识,
		"processControl":流转信息,
		"cancel":false
	}
</xmp>	
*/

/**
	@name UI.process#onAfterAbort
	@event
	@description <b>[回调型事件]</b>终止之后（终止事务内）
	@param event 它的结构如下:
<xmp>	
	{
		"source":组件的js对象,
		"task":任务标识,
		"processControl":流转信息,
		"cancel":false
	}
</xmp>	
*/

/**
	@name UI.process#onAbortCommit
	@event
	@description <b>[回调型事件]</b>终止成功（终止事务外）
	@param event 它的结构如下:
<xmp>	
	{
		"source":组件的js对象,
		"task":任务标识,
		"processControl":流转信息,
		"cancel":false
	}
</xmp>	
	
*/

/**
	@name UI.process#onAbortError
	@event
	@description <b>[回调型事件]</b>终止失败（终止事务外）
	@param event 它的结构如下:
<xmp>	
	{
		"source":组件的js对象,
		"task":任务标识,
		"processControl":流转信息,
		"cancel":false,
		"errorType": "client"或"server", 
		"error": js异常对象, 
		"errorNode": 服务端错误信息
	}
</xmp>	
*/

/**
	@name UI.process#onBeforeAbortQuery
	@event
	@description <b>[回调型事件]</b>终止查询之前
	@param event 它的结构如下:
<xmp>	
	{
		"source":组件的js对象,
		"task":任务标识,
		"cancel":false
	}
</xmp>	
*/

/**
	@name UI.process#onAfterAbortQuery
	@event
	@description <b>[回调型事件]</b>终止查询之后
	@param event 它的结构如下:
<xmp>	
	{
		"source":组件的js对象,
		"task":任务标识,
		"processControl":流转信息,
		"cancel":false
	}
</xmp>	
*/

/**
	@name UI.process#onAbortQueryError
	@event
	@description <b>[回调型事件]</b>终止查询失败
	@param event 它的结构如下:
<xmp>	
	{
		"source":组件的js对象,
		"task":任务标识,
		"cancel":false,
		"errorType": "client"或"server", 
		"error": js异常对象, 
		"errorNode": 服务端错误信息
	}
</xmp>	
*/

/**
	@name UI.process#onBeforeSuspend
	@event
	@description <b>[回调型事件]</b>暂停之前（暂停事务内）
	@param event 它的结构如下:
<xmp>	
	{
		"source":组件的js对象,
		"task":任务标识,
		"processControl":流转信息,
		"cancel":false
	}
</xmp>	
*/

/**
	@name UI.process#onAfterSuspend
	@event
	@description <b>[回调型事件]</b>暂停之后（暂停事务内）
	@param event 它的结构如下:
<xmp>	
	{
		"source":组件的js对象,
		"task":任务标识,
		"processControl":流转信息,
		"cancel":false
	}
</xmp>	
	
*/

/**
	@name UI.process#onSuspendCommit
	@event
	@description <b>[回调型事件]</b>暂停成功（暂停事务外）
	@param event 它的结构如下:
<xmp>	
	{
		"source":组件的js对象,
		"task":任务标识,
		"processControl":流转信息,
		"cancel":false
	}
</xmp>	
	
*/

/**
	@name UI.process#onSuspendError
	@event
	@description <b>[回调型事件]</b>暂停失败（暂停事务外）
	@param event 它的结构如下:
<xmp>	
	{
		"source":组件的js对象,
		"task":任务标识,
		"processControl":流转信息,
		"cancel":false,
		"errorType": "client"或"server", 
		"error": js异常对象, 
		"errorNode": 服务端错误信息
	}
</xmp>	
*/

/**
	@name UI.process#onBeforeSuspendQuery
	@event
	@description <b>[回调型事件]</b>暂停查询之前
	@param event 它的结构如下:
<xmp>	
	{
		"source":组件的js对象,
		"task":任务标识,
		"cancel":false
	}
</xmp>	
	
*/

/**
	@name UI.process#onAfterSuspendQuery
	@event
	@description <b>[回调型事件]</b>暂停查询之后
	@param event 它的结构如下:
<xmp>	
	{
		"source":组件的js对象,
		"task":任务标识,
		"processControl":流转信息,
		"cancel":false
	}
</xmp>	
	
*/

/**
	@name UI.process#onSuspendQueryError
	@event
	@description <b>[回调型事件]</b>暂停查询失败
	@param event 它的结构如下:
<xmp>	
	{
		"source":组件的js对象,
		"task":任务标识,
		"cancel":false,
		"errorType": "client"或"server", 
		"error": js异常对象, 
		"errorNode": 服务端错误信息
	}
</xmp>	
	
*/

/**
	@name UI.process#onBeforeTransfer
	@event
	@description <b>[回调型事件]</b>转发之前（转发事务内）
	@param event 它的结构如下:
<xmp>	
	{
		"source":组件的js对象,
		"task":任务标识,
		"processControl":流转信息,
		"cancel":false
	}
</xmp>	
	
*/

/**
	@name UI.process#onAfterTransfer
	@event
	@description <b>[回调型事件]</b>转发之后（转发事务内）
	@param event 它的结构如下:
<xmp>	
	{
		"source":组件的js对象,
		"task":任务标识,
		"processControl":流转信息,
		"cancel":false
	}
</xmp>	
	
*/

/**
	@name UI.process#onTransferCommit
	@event
	@description <b>[回调型事件]</b>转发成功（转发事务外）
	@param event 它的结构如下:
<xmp>	
	{
		"source":组件的js对象,
		"task":任务标识,
		"processControl":流转信息,
		"cancel":false
	}
</xmp>	
	
*/

/**
	@name UI.process#onTransferError
	@event
	@description <b>[回调型事件]</b>转发失败（转发事务外）
	@param event 它的结构如下:
<xmp>	
	{
		"source":组件的js对象,
		"task":任务标识,
		"processControl":流转信息,
		"cancel":false,
		"errorType": "client"或"server", 
		"error": js异常对象, 
		"errorNode": 服务端错误信息
	}
</xmp>	
	
*/

/**
	@name UI.process#onBeforeTransferQuery
	@event
	@description <b>[回调型事件]</b>转发查询之前
	@param event 它的结构如下:
<xmp>	
	{
		"source":组件的js对象,
		"task":任务标识,
		"cancel":false
	}
</xmp>	
	
*/

/**
	@name UI.process#onAfterTransferQuery
	@event
	@description <b>[回调型事件]</b>转发查询之后
	@param event 它的结构如下:
<xmp>	
	{
		"source":组件的js对象,
		"task":任务标识,
		"processControl":流转信息,
		"cancel":false
	}
</xmp>	
	
*/

/**
	@name UI.process#onTransferQueryError
	@event
	@description <b>[回调型事件]</b>转发查询失败
	@param event 它的结构如下:
<xmp>	
	{
		"source":组件的js对象,
		"task":任务标识,
		"cancel":false,
		"errorType": "client"或"server", 
		"error": js异常对象, 
		"errorNode": 服务端错误信息
	}
</xmp>	
	
*/


/**
	@name UI.process#onBeforeStartCustomizedQuery
	@event
	@description <b>[回调型事件]</b>定制流程查询之前
	@param event 它的结构如下:
<xmp>	
	{
		"source":组件的js对象,
		"task":任务标识,
		"cancel":false
	}
</xmp>	
	
*/

/**
	@name UI.process#onAfterStartCustomizedQuery
	@event
	@description <b>[回调型事件]</b>定制流程查询之后
	@param event 它的结构如下:
<xmp>	
	{
		"source":组件的js对象,
		"task":任务标识,
		"cancel":false
	}
</xmp>	
	
*/

/**
	@name UI.process#onStartCustomizedQueryError
	@event
	@description <b>[回调型事件]</b>定制流程查询失败
	@param event 它的结构如下:
<xmp>	
	{
		"source":组件的js对象,
		"task":任务标识,
		"cancel":false,
		"errorType": "client"或"server", 
		"error": js异常对象, 
		"errorNode": 服务端错误信息
	}
</xmp>	
	
*/

/**
	@name UI.process#setAutoStart
	@function
	@description 设置是否自动启动流程
	@param v 
	@returns {void} 
*/

/**
	@name UI.process#isAutoStart
	@function
	@description 是否自动启动流程
	@returns {boolean} 
*/

/**
	@name UI.process#setAutoFilter
	@function
	@description 设置是否自动过虑业务数据
	@param v 
	@returns {void} 
*/

/**
	@name UI.process#isAutoFilter
	@function
	@description 是否自动过虑业务数据
	@returns {boolean} 
*/

/**
	@name UI.process#setAutoSave
	@function
	@description 设置是否自动保存业务数据
	@param v  
	@returns {void} 
*/

/**
	@name UI.process#isAutoSave
	@function
	@description 是否自动保存业务数据
	@returns {boolean} 
*/

/**
	@name UI.process#setAutoClose
	@function
	@description 设置是否自动关闭功能页面
	@param v  
	@returns {void} 
*/

/**
	@name UI.process#isAutoClose
	@function
	@description 是否自动关闭功能页面
	@returns {boolean} 
*/


/**
	@name UI.process#start
	@function
	@description 启动流程
	@param process <b>[required]</b>流程标识的全称, 值可以为null
	@param name <b>[required]</b>流程实例名称, 值可以为null
	@param data <b>[required]</b>流程关联的业务数据, 必须有值
	@param options 可选参数
<xmp>
		是一个json格式, 有以下三个参数executor，onSuccess和onError,
		executor: 表示首环节的执行者，可以不指定, 这时默认就是当前人员成员;
		onSuccess: 表示启动流程成功后的回调函数, 回调函数的参数event结构如下：{"source":组件的js对象};
		onError: 表示启动流程失败后的回调函数 回调函数的参数event结构如下：{"source":组件的js对象};
		格式如下：
			{
				"executor": {String}, 
				"onSuccesss": {Function}, 
				"onError": {Function}
			}
</xmp>
	@returns {boolean}
	@see ProcessExternalActions.externalStartProcessAction 
	@examples
<xmp>
		justep.xbl("p").start("/demo/process/process/and/andProcess", "测试启动流程", "业务数据ID", 
			{"onSuccess": function(event){alert("启动流程成功");}, "onError": function(event){alert("启动流程失败");}});
</xmp>
*/

/**
	@name UI.process#startByTemplate
	@function
	@description 根据模板启动流程
	@param process <b>[required]</b>流程标识的全称, 值可以为null
	@param templateID <b>[required]</b>流程模板标识，必须有值
	@param name <b>[required]</b>流程实例名称, 值可以为null
	@param data <b>[required]</b>流程关联的业务数据, 必须有值
	@param options 可选参数
<xmp>
		是一个json格式, 有以下三个参数executor，onSuccess和onError,
		executor: 表示首环节的执行者，可以不指定, 这时默认就是当前人员成员;
		onSuccess: 表示启动流程成功后的回调函数, 回调函数的参数event结构如下：{"source":组件的js对象};
		onError: 表示启动流程失败后的回调函数 回调函数的参数event结构如下：{"source":组件的js对象};
		格式如下：
			{
				"executor": {String}, 
				"onSuccesss": {Function}, 
				"onError": {Function}
			}
		
</xmp>
	@returns {boolean} 
	@see ProcessExternalActions.externalStartProcessAction 
*/


/**
	@name UI.process#startExt
	@function 
	@description 启动流程(扩展) 
	@param process <b>[required]</b>流程标识的全称
	@param relations <b>[required]</b>流程实例属性值对，是一个数组，数组的下标是属性名，相应的是属性值
	@param options 可选参数
<xmp>
		 是一个json格式, 有以下三个参数executor，onSuccess和onError,
		executor: 表示首环节的执行者，可以不指定, 这时默认就是当前人员成员;
		onSuccess: 表示启动流程成功后的回调函数, 回调函数的参数event结构如下：{"source":组件的js对象};
		onError: 表示启动流程失败后的回调函数 回调函数的参数event结构如下：{"source":组件的js对象};
		格式如下：
			{
				"executor": {String}, 
				"onSuccesss": {Function}, 
				"onError": {Function}
			}
</xmp>
	@returns {boolean}
	@see ProcessExternalActions.externalStartProcessAction 
*/

/**
	@name UI.process#advanceQuery
	@function
	@description 流转查询
	@param options 可选参数
<xmp>
		是一个json格式, 有以下两个参数onSuccess和onError,
		onSuccess: 表示流转查询成功后的回调函数, 回调函数的参数event结构如下：{"source":组件的js对象};
		onError: 表示流转查询失败后的回调函数 回调函数的参数event结构如下：{"source":组件的js对象};
		格式如下：
			{
				"onSuccesss": {Function}, 
				"onError": {Function}
			}
</xmp>
	@returns {boolean}
	@see ProcessExternalActions.externalAdvanceProcessQueryAction
*/

/**
	@name UI.process#advanceQueryExt
	@function
	@description 流转查询(扩展)
	@param task <b>[required]</b>基于指定的任务执行advanceQuery	
	@param options 可选参数
<xmp>
		是一个json格式, 有以下两个参数onSuccess和onError,
		onSuccess: 表示流转查询成功后的回调函数, 回调函数的参数event结构如下：{"source":组件的js对象};
		onError: 表示流转查询失败后的回调函数 回调函数的参数event结构如下：{"source":组件的js对象};
		格式如下：
			{
				"onSuccesss": {Function}, 
				"onError": {Function}
			}
</xmp>
	@returns {boolean}
	@see ProcessExternalActions.externalAdvanceProcessQueryAction
*/

/**
	@name UI.process#advance
	@function
	@description 流转
	@param options 可选参数
<xmp>
		是一个json格式, 有以下两个参数onSuccess和onError,
		onSuccess: 表示流转成功后的回调函数, 回调函数的参数event结构如下：{"source":组件的js对象};
		onError: 表示流转失败后的回调函数 回调函数的参数event结构如下：{"source":组件的js对象};
		格式如下：
			{
				"onSuccesss": {Function}, 
				"onError": {Function}
			}
</xmp>
	@returns {boolean}
	@see ProcessExternalActions.externalAdvanceProcessAction
*/

/**
	@name UI.process#advanceExt
	@function
	@description 流转(扩展)
	@param task <b>[required]</b>基于指定的任务执行advance
	@param processControl <b>[required]</b>流转信息	
	@param options 可选参数
<xmp>
		是一个json格式, 有以下两个参数onSuccess和onError,
		onSuccess: 表示流转成功后的回调函数, 回调函数的参数event结构如下：{"source":组件的js对象};
		onError: 表示流转失败后的回调函数 回调函数的参数event结构如下：{"source":组件的js对象};
		格式如下：
			{
				"onSuccesss": {Function}, 
				"onError": {Function}
			}
</xmp>
	@returns {boolean}
	@see ProcessExternalActions.externalAdvanceProcessAction
*/

/**
	@name UI.process#backQuery
	@function
	@description 回退查询
	@param options 可选参数
<xmp>
		是一个json格式, 有以下两个参数onSuccess和onError,
		onSuccess: 表示回退查询成功后的回调函数, 回调函数的参数event结构如下：{"source":组件的js对象};
		onError: 表示回退查询失败后的回调函数 回调函数的参数event结构如下：{"source":组件的js对象};
		格式如下：
			{
				"onSuccesss": {Function}, 
				"onError": {Function}
			}
</xmp>
	@returns {boolean}
	@see ProcessExternalActions.externalBackProcessQueryAction
*/

/**
	@name UI.process#backQueryExt
	@function
	@description 回退查询(扩展)
	@param task <b>[required]</b>基于指定的任务执行backQuery	
	@param options 可选参数
<xmp>
		是一个json格式, 有以下两个参数onSuccess和onError,
		onSuccess: 表示回退查询成功后的回调函数, 回调函数的参数event结构如下：{"source":组件的js对象};
		onError: 表示回退查询失败后的回调函数 回调函数的参数event结构如下：{"source":组件的js对象};
		格式如下：
			{
				"onSuccesss": {Function}, 
				"onError": {Function}
			}
</xmp>
	@returns {boolean}
	@see ProcessExternalActions.externalBackProcessQueryAction
*/

/**
	@name UI.process#back
	@function
	@description 回退
	@param options 可选参数
<xmp>
		是一个json格式, 有以下两个参数onSuccess和onError,
		onSuccess: 表示回退成功后的回调函数, 回调函数的参数event结构如下：{"source":组件的js对象};
		onError: 表示回退失败后的回调函数 回调函数的参数event结构如下：{"source":组件的js对象};
		格式如下：
			{
				"onSuccesss": {Function}, 
				"onError": {Function}
			}
</xmp>
	@returns {boolean}
	@see ProcessExternalActions.externalBackProcessAction
*/

/**
	@name UI.process#backExt
	@function
	@description 回退(扩展)
	@param task <b>[required]</b>基于指定的任务执行back
	@param processControl <b>[required]</b>流转信息	
	@param options 可选参数
<xmp>
		是一个json格式, 有以下两个参数onSuccess和onError,
		onSuccess: 表示回退成功后的回调函数, 回调函数的参数event结构如下：{"source":组件的js对象};
		onError: 表示回退失败后的回调函数 回调函数的参数event结构如下：{"source":组件的js对象};
		格式如下：
			{
				"onSuccesss": {Function}, 
				"onError": {Function}
			}
</xmp>
	@returns {boolean}
	@see ProcessExternalActions.externalBackProcessAction
*/

/**
	@name UI.process#suspendQuery
	@function
	@description 暂停查询
	@param options 可选参数
		<xmp>
		是一个json格式, 有以下两个参数onSuccess和onError,
		onSuccess: 表示暂停查询成功后的回调函数, 回调函数的参数event结构如下：{"source":组件的js对象};
		onError: 表示暂停查询失败后的回调函数 回调函数的参数event结构如下：{"source":组件的js对象};
		格式如下：
			{
				"onSuccesss": {Function}, 
				"onError": {Function}
			}
		</xmp>
	@returns {boolean}
	@see ProcessExternalActions.externalSuspendProcessQueryAction
*/

/**
	@name UI.process#suspendQueryExt
	@function
	@description 暂停查询(扩展)
	@param task <b>[required]</b>基于指定的任务执行suspendQuery	
	@param options 可选参数
		<xmp>
		是一个json格式, 有以下两个参数onSuccess和onError,
		onSuccess: 表示暂停查询成功后的回调函数, 回调函数的参数event结构如下：{"source":组件的js对象};
		onError: 表示暂停查询失败后的回调函数 回调函数的参数event结构如下：{"source":组件的js对象};
		格式如下：
			{
				"onSuccesss": {Function}, 
				"onError": {Function}
			}
		</xmp>
	@returns {boolean}
	@see ProcessExternalActions.externalSuspendProcessQueryAction
*/

/**
	@name UI.process#suspend
	@function
	@description 暂停
	@param options 可选参数
		<xmp>
		是一个json格式, 有以下两个参数onSuccess和onError,
		onSuccess: 表示暂停成功后的回调函数, 回调函数的参数event结构如下：{"source":组件的js对象};
		onError: 表示暂停失败后的回调函数 回调函数的参数event结构如下：{"source":组件的js对象};
		格式如下：
			{
				"onSuccesss": {Function}, 
				"onError": {Function}
			}
		</xmp>
	@returns {boolean}
	@see ProcessExternalActions.externalSuspendProcessAction
*/

/**
	@name UI.process#suspendExt
	@function
	@description 暂停(扩展)
	@param task <b>[required]</b>基于指定的任务执行suspend
	@param processControl <b>[required]</b>流转信息	
	@param options 可选参数
		<xmp>
		是一个json格式, 有以下两个参数onSuccess和onError,
		onSuccess: 表示暂停成功后的回调函数, 回调函数的参数event结构如下：{"source":组件的js对象};
		onError: 表示暂停失败后的回调函数 回调函数的参数event结构如下：{"source":组件的js对象};
		格式如下：
			{
				"onSuccesss": {Function}, 
				"onError": {Function}
			}
		</xmp>
	@returns {boolean}
	@see ProcessExternalActions.externalSuspendProcessAction
*/

/**
	@name UI.process#abortQuery
	@function
	@description 终止查询
	@param options 可选参数
		<xmp>
		是一个json格式, 有以下两个参数onSuccess和onError,
		onSuccess: 表示终止查询成功后的回调函数, 回调函数的参数event结构如下：{"source":组件的js对象};
		onError: 表示终止查询失败后的回调函数 回调函数的参数event结构如下：{"source":组件的js对象};
		格式如下：
			{
				"onSuccesss": {Function}, 
				"onError": {Function}
			}
		</xmp>
	@returns {boolean}
	@see ProcessExternalActions.externalAbortProcessQueryAction
*/

/**
	@name UI.process#abortQueryExt
	@function
	@description 终止查询(扩展)
	@param task <b>[required]</b>基于指定的任务执行abortQuery	
	@param options 可选参数
		<xmp>
		是一个json格式, 有以下两个参数onSuccess和onError,
		onSuccess: 表示终止查询成功后的回调函数, 回调函数的参数event结构如下：{"source":组件的js对象};
		onError: 表示终止查询失败后的回调函数 回调函数的参数event结构如下：{"source":组件的js对象};
		格式如下：
			{
				"onSuccesss": {Function}, 
				"onError": {Function}
			}
		</xmp>
	@returns {boolean}
	@see ProcessExternalActions.externalAbortProcessQueryAction
*/

/**
	@name UI.process#abort
	@function
	@description 终止
	@param options 可选参数
		<xmp>
		是一个json格式, 有以下两个参数onSuccess和onError,
		onSuccess: 表示终止成功后的回调函数, 回调函数的参数event结构如下：{"source":组件的js对象};
		onError: 表示终止失败后的回调函数 回调函数的参数event结构如下：{"source":组件的js对象};
		格式如下：
			{
				"onSuccesss": {Function}, 
				"onError": {Function}
			}
		</xmp>
	@returns {boolean}
	@see ProcessExternalActions.externalAbortProcessAction
*/

/**
	@name UI.process#abortExt
	@function
	@description 终止(扩展)
	@param task <b>[required]</b>基于指定的任务执行abort
	@param processControl <b>[required]</b>流转信息	
	@param options 可选参数
		<xmp>
		是一个json格式, 有以下两个参数onSuccess和onError,
		onSuccess: 表示终止成功后的回调函数, 回调函数的参数event结构如下：{"source":组件的js对象};
		onError: 表示终止失败后的回调函数 回调函数的参数event结构如下：{"source":组件的js对象};
		格式如下：
			{
				"onSuccesss": {Function}, 
				"onError": {Function}
			}
		</xmp>
	@returns {boolean}
	@see ProcessExternalActions.externalAbortProcessAction
*/

/**
	@name UI.process#transferQuery
	@function
	@description 转发查询
	@param options 可选参数
		<xmp>
		是一个json格式, 有以下两个参数onSuccess和onError,
		onSuccess: 表示转发查询成功后的回调函数, 回调函数的参数event结构如下：{"source":组件的js对象};
		onError: 表示转发查询失败后的回调函数 回调函数的参数event结构如下：{"source":组件的js对象};
		格式如下：
			{
				"onSuccesss": {Function}, 
				"onError": {Function}
			}
		</xmp>
	@returns {boolean}
	@see ProcessExternalActions.externalTransferTaskQueryAction
*/

/**
	@name UI.process#transferQueryExt
	@function
	@description 转发查询(扩展)
	@param task <b>[required]</b>基于指定的任务执行transferQuery	
	@param options 可选参数
		<xmp>
		是一个json格式, 有以下两个参数onSuccess和onError,
		onSuccess: 表示转发查询成功后的回调函数, 回调函数的参数event结构如下：{"source":组件的js对象};
		onError: 表示转发查询失败后的回调函数 回调函数的参数event结构如下：{"source":组件的js对象};
		格式如下：
			{
				"onSuccesss": {Function}, 
				"onError": {Function}
			}
		</xmp>
	@returns {boolean}
	@see ProcessExternalActions.externalTransferTaskQueryAction
*/

/**
	@name UI.process#transfer
	@function
	@description 转发
	@param options 可选参数
		<xmp>
		是一个json格式, 有以下两个参数onSuccess和onError,
		onSuccess: 表示转发成功后的回调函数, 回调函数的参数event结构如下：{"source":组件的js对象};
		onError: 表示转发失败后的回调函数 回调函数的参数event结构如下：{"source":组件的js对象};
		格式如下：
			{
				"onSuccesss": {Function}, 
				"onError": {Function}
			}
		</xmp>
	@returns {boolean}
	@see ProcessExternalActions.externalTransferTaskAction
*/

/**
	@name UI.process#transferExt
	@function
	@description 转发(扩展)
	@param task <b>[required]</b>基于指定的任务执行transfer
	@param processControl <b>[required]</b> 流转信息	
	@param options 可选参数
		<xmp>
		是一个json格式, 有以下两个参数onSuccess和onError,
		onSuccess: 表示转发成功后的回调函数, 回调函数的参数event结构如下：{"source":组件的js对象};
		onError: 表示转发失败后的回调函数 回调函数的参数event结构如下：{"source":组件的js对象};
		格式如下：
			{
				"onSuccesss": {Function}, 
				"onError": {Function}
			}
		</xmp>
	@returns {boolean}
	@see ProcessExternalActions.externalTransferTaskAction
*/

/**
	@name UI.process#startCustomizedQuery
	@function
	@description 定制流程查询
	@param options 可选参数
		<xmp>
		是一个json格式, 有以下两个参数onSuccess和onError,
		onSuccess: 表示定制流程查询成功后的回调函数, 回调函数的参数event结构如下：{"source":组件的js对象};
		onError: 表示定制流程查询失败后的回调函数 回调函数的参数event结构如下：{"source":组件的js对象};
		格式如下：
			{
				"onSuccesss": {Function}, 
				"onError": {Function}
			}
		</xmp>
	@returns {boolean}
	@see ProcessExternalActions.externalStartCustomizedProcessQueryAction
*/

/**
	@name UI.process#showChart
	@function
	@description 显示流程图
	@returns {void}
*/

/**
	@name UI.process#getDataType
	@function
	@description 获取ProcessControl的数据格式，值域是{json, xml}
	@returns {String}
*/

/**
	@name UI.process#openExecuteListDialog
	@function
	@description 显示流程记录对话框
	@param task 任务
	@returns {void}
*/

/**
	@name UI.process#canModifyExecutor
	@function
	@description 是否允许修改任务的执行者
	@returns {Boolean}
*/


/**
	@name UI.process#canModifyExecutorExt
	@function
	@description 是否允许修改任务的执行者
	@param task 任务
	@returns {Boolean}
*/


/**
	@name UI.process#modifyExecutor
	@function
	@description 修改任务的执行者
	@returns {void}
*/


/**
	@name UI.process#modifyExecutorExt
	@function
	@description 修改任务的执行者
	@param task 任务
	@param check 是否需要检查任务是否是自己的
	@returns {void}
*/

/**
	@name UI.process#withdrawTask
	@function
	@description 回收任务
	@returns {void}
	@see ProcessExternalActions.externalWithdrawTaskAction
*/


/**
	@name UI.process#withdrawTaskExt
	@function
	@description 回收任务
	@param task 任务
	@returns {void}
	@see ProcessExternalActions.externalWithdrawTaskAction
*/
