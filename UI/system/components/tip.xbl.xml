<?xml version="1.0" encoding="UTF-8"?>
<xbl:xbl xmlns="http://www.w3.org/1999/xhtml"
	xmlns:xbl="http://www.w3.org/ns/xbl"
	xmlns:xhtml="http://www.w3.org/1999/xhtml"
	xmlns:xsl="http://www.w3.org/1999/XSL/Transform" xsl:version="2.0"
	xmlns:xs="http://www.w3.org/2001/XMLSchema"
	xmlns:xforms="http://www.justep.com/xforms"
	
	xmlns:ev="http://www.w3.org/2001/xml-events"
	script-type="text/javascript">
<!-- message -->
	<xbl:binding id="tip">
		<xbl:template template-type="xslt">
			<xsl:template match="/*">
				<root>
				<xhtml:div class="tip_display">
					<xsl:attribute name="id"><xsl:value-of select="@id"/>-board</xsl:attribute>
					<xsl:attribute name="style"><xsl:value-of select="@display-style"/></xsl:attribute>
					<xhtml:div>
						<xsl:attribute name="id"><xsl:value-of select="@id"/>-info-label</xsl:attribute>
					</xhtml:div>
				</xhtml:div>
				</root>
			</xsl:template>
		</xbl:template>
		<xbl:implementation>
		<![CDATA[
		({	
			"initXBL" : function() {
				this.messageid = this.domNode.id;
				this.__display = document.getElementById(this.messageid+"-board");
				this.__message_label = document.getElementById(this.messageid+"-info-label");
				this.__position = this.domNode.getAttribute("display")||"center";
				this.__positionX = 0;
				this.__positionY = 0;
				this.__time = this.domNode.getAttribute("time")||2;
				this.__timer = null;
			},
			"show" : function(option) {
				this.__message_label.innerHTML = option.message||"";
				this.__width = jQuery(this.__display).width();
				this.__height = jQuery(this.__display).height();
				this.setDisplay(option.display||this.__position);
				this.__display.style.display = "inline";
				
				if (this.__timer){
					clearTimeout(this.__timer);
				}
				
				this.__timer = justep.XBLObject.setXBLTimeout(this.hide,(option.time||this.__time)*1000,this);
			},
			"hide" : function() {
				this.__display.style.display = "none";
			},
			"setPosition" : function(top,left){
				this.__display.style.top = top;
				this.__display.style.left = left;
			},
			"setDisplay" : function(display){
				var top,left;
				var b = 6;
				switch(display)
				{
					case "center" :	
						top = topPosition() + (pageHeight() / 2) - (this.__height / 2) - b + 'px';
						left = leftPosition() + (pageWidth() / 2) - (this.__width / 2) - b + 'px';					
					break;
					case "top" :
						top = 0 + 'px';
						left = leftPosition() + (pageWidth() / 2) - (this.__width / 2) - b + 'px';										
					break;
					case "bottom" :
						top = topPosition() + (pageHeight()) - (this.__height) - b + 'px';
						left = leftPosition() + (pageWidth() / 2) - (this.__width / 2) - b + 'px';															
					break;
					case "left" :
						top = topPosition() + (pageHeight() / 2) - (this.__height / 2) - b + 'px';
						left =0 + 'px';										
					break;
					case "right" :
						top = topPosition() + (pageHeight() / 2) - (this.__height / 2) - b + 'px';
						left = leftPosition() + (pageWidth()) - (this.__width) - b + 'px';										
					break;
					case "topleft" :
						top = 0 + 'px';
						left = 0 + 'px';															
					break;
					case "topright" :
						top = 0 + 'px';
						left = leftPosition() + (pageWidth()) - (this.__width) - b + 'px';										
					break;
					case "bottomleft" :
						top = topPosition() + (pageHeight()) - (this.__height) - b + 'px';
						left = 0 + 'px';																				
					break;					
					case "bottomright" :
						top = topPosition() + (pageHeight()) - (this.__height) - b + 'px';
						left = leftPosition() + (pageWidth()) - (this.__width) - b + 'px';															
					break;
				}

				this.setPosition(top,left);
				
				function pageWidth() {
				  return window.innerWidth != null ? window.innerWidth : document.documentElement && document.documentElement.clientWidth ? document.documentElement.clientWidth : document.body != null ? document.body.clientWidth : null;
				}
				function pageHeight() {
				  return window.innerHeight != null? window.innerHeight : document.documentElement && document.documentElement.clientHeight ? document.documentElement.clientHeight : document.body != null? document.body.clientHeight : null;
				}
				function topPosition() {
				  return typeof window.pageYOffset != 'undefined' ? window.pageYOffset : document.documentElement && document.documentElement.scrollTop ? document.documentElement.scrollTop : document.body.scrollTop ? document.body.scrollTop : 0;
				}
				function leftPosition() {
				  return typeof window.pageXOffset != 'undefined' ? window.pageXOffset : document.documentElement && document.documentElement.scrollLeft ? document.documentElement.scrollLeft : document.body.scrollLeft ? document.body.scrollLeft : 0;
				}									
			}
		})
		]]>
		</xbl:implementation>
		<xbl:resources>
			<xbl:style>
			<![CDATA[
				.tip_display{
					position:absolute;
					display:none;
					padding:2px;
					border:1px solid black;
					background-color:white;
					white-space:nowrap;
				}
			]]>
			</xbl:style>
		</xbl:resources>		
	</xbl:binding>	
</xbl:xbl>

